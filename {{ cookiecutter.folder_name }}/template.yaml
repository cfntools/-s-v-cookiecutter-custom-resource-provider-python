AWSTemplateFormatVersion: '2010-09-09'
Description: {{ cookiecutter.resource_description }}
Parameters:
  LogLevel:
    Type: String
    Default: WARNING
    AllowedValues: [CRITICAL, ERROR, WARNING, INFO, DEBUG]
  LogRetentionInDays:
    Type: String
    Default: ''
    AllowedValues: ['', 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  PermissionsBoundary:
    Type: String
    Default: ''
    AllowedPattern: '(^$|^arn:aws:iam::\d{12}:policy/.*$)'
  RoleName:
    Type: String
    Default: ''
    AllowedPattern: '[a-zA-Z0-9+=,.@_-]*'
  RolePath:
    Type: String
    Default: '/'
    AllowedPattern: '(^/$|^/[\u0021-\u007F]+/$)'
  {%- if cookiecutter.include_optional_parameters == "y" %}
  DeleteAction:
    Type: String
    Default: Delete
    AllowedValues: [Delete, Retain, Snapshot, Fail]
  UpdateReplaceAction:
    Type: String
    Default: Delete
    AllowedValues: [Delete, Snapshot, Fail]
  {%- endif %}

Conditions:
  LogRetentionInDaysSet: !Not [!Equals [!Ref LogRetentionInDays, '']]
  PermissionsBoundarySet: !Not [!Equals [!Ref PermissionsBoundary, '']]
  CreateRole: !Equals [!Ref RoleName, '']

Rules:
  NoPermissionsBoundaryWhenRoleIsSet:
    RuleCondition: !Not [!Equals [!Ref RoleName, '']]
    Assertions:
      - Assert: !Equals [!Ref PermissionsBoundary, '']
        AssertDescription: PermissionsBoundary must be empty if RoleName is used

Resources:
  CustomResourceRole:
    Condition: CreateRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: !Ref RolePath
      PermissionsBoundary: !If [PermissionsBoundarySet, !Ref PermissionsBoundary, !Ref AWS::NoValue]
  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: custom_resource/
      Handler: app.lambda_handler
      MemorySize: {{ cookiecutter.lambda_memory_size }}
      Role: !If [CreateRole, !GetAtt CustomResourceRole.Arn, !Sub "arn:aws:iam::${AWS::AccountId}:role${RolePath}${RoleName}"]
      Runtime: python3.7
      Timeout: {{ cookiecutter.lambda_timeout }}
      Description: !Sub "${AWS::StackName} CustomResource lambda for {{ cookiecutter.resource_type }}"
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          {%- if cookiecutter.include_optional_parameters == "y" %}
          DELETE_ACTION: !Ref DeleteAction
          UPDATE_REPLACE_ACTION: !Ref UpdateReplaceAction
          {%- endif %}
  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CustomResourceFunction}"
      RetentionInDays: !If [LogRetentionInDaysSet, !Ref LogRetentionInDays, !Ref AWS::NoValue]
  CustomResourceLogPermissions:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !If [CreateRole, !Ref CustomResourceRole, !Ref RoleName]
      PolicyName: !Sub "${AWS::Region}-CustomResourceLogGroup"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CustomResourceFunction}"
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CustomResourceFunction}:*"
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CustomResourceFunction}:*:*"

Outputs:
  ServiceToken:
    Value: !GetAtt CustomResourceFunction.Arn
  RoleArn:
    Value: !If [CreateRole, !GetAtt CustomResourceRole.Arn, !Sub "arn:aws:iam::${AWS::AccountId}:role${RolePath}${RoleName}"]